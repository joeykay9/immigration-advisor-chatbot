{"version":3,"sources":["../src/server.js"],"names":["dotenv","config","app","bodyParserJSON","bodyParser","json","bodyParserURLEncoded","urlencoded","extended","driver","neo4j","process","env","AURA_ENDPOINT","auth","basic","AURA_USERNAME","AURA_PASSWORD","encrypted","session","readRulesBySection","sectionTitle","query","readTransaction","tx","run","use","get","req","res","send","post","console","log","body","firstName","Field_firstName_Value","responseObject","nationality","Field_nationality_Value","Field_language_Value","CurrentInput","eea_countries","eea_nationalities","isEAA","string","toLowerCase","tasks","find","purpose","Field_purpose_Value","JSON","parse","Memory","months","Field_months_Value","six_months_visa_free_countries","isSixMonthsVisaFreeCountry","age","Field_age_Value","response","Field_response_Value","actions","then","results","records","map","record","_fields","rules","properties","desc","forEach","rule","say","push","close","listen","PORT"],"mappings":"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","sourcesContent":["import dotenv from \"dotenv\"\r\nimport express from \"express\"\r\nimport bodyParser from 'body-parser'\r\nimport neo4j from 'neo4j-driver'\r\n\r\ndotenv.config()\r\n\r\nconst app = express()\r\nconst bodyParserJSON = bodyParser.json();\r\nconst bodyParserURLEncoded = bodyParser.urlencoded({ extended: true });\r\n\r\nconst driver = neo4j.driver(\r\n    process.env.AURA_ENDPOINT, \r\n    neo4j.auth.basic(process.env.AURA_USERNAME, process.env.AURA_PASSWORD), \r\n    { \r\n        encrypted: true \r\n    } \r\n);\r\n\r\nconst session = driver.session()\r\n\r\nconst readRulesBySection = (sectionTitle) => {\r\n    const query = `\r\n        MATCH (s:Section {title: $sectionTitle}), (p:Paragraph), (r:Rule)\r\n        WHERE (s)-[:CONTAINS]->(p) AND (p)-[:CONTAINS]->(r) \r\n        RETURN r`;\r\n\r\n    return session.readTransaction(tx => tx.run(query, { sectionTitle }))\r\n}\r\n\r\napp.use(bodyParserJSON);\r\napp.use(bodyParserURLEncoded);\r\n\r\napp.get('/', (req, res) => res.send('Hello World!'))\r\n\r\napp.post('/name-response', (req, res) => {\r\n    \r\n    console.log(req.body)\r\n\r\n    let firstName = req.body.Field_firstName_Value\r\n    \r\n    const responseObject = {\r\n        \"actions\": [\r\n            {\r\n                \"remember\": {\r\n                    \"name\": firstName\r\n                }\r\n            },\r\n            {\r\n                \"say\": firstName + \" ðŸ˜Š. That's a lovely name.\"\r\n            },\r\n            {\r\n                \"say\": \"What is your nationality or what country are you from?\"\r\n            },\r\n            {\r\n                \"listen\": {\r\n                    \"tasks\": [\r\n                        \"respond_to_nationality\"\r\n                    ]\r\n                }\r\n            },\r\n        ]\r\n    };\r\n    \r\n    return res.json(responseObject)\r\n})\r\n\r\napp.post('/nationality-response', (req, res) => {\r\n\r\n    let nationality = req.body.Field_nationality_Value\r\n\r\n    if(!(nationality)){ //user entered string which is not a country\r\n        nationality = req.body.Field_language_Value\r\n\r\n        if(!(nationality)) //user entered string which is not a language\r\n            nationality = req.body.CurrentInput\r\n    }\r\n\r\n    console.log(req.body)\r\n    \r\n    let eea_countries = [\"Austria\", \"Belgium\", \"Bulgaria\", \"Croatia\", \"Cyprus\", \"Republic of Cyprus\", \"Czech Republic\", \r\n                \"Denmark\", \"Estonia\", \"Finland\", \"France\", \"Germany\", \"Greece\", \"Hungary\", \"Iceland\", \"Ireland\", \"Italy\", \"Latvia\", \r\n                \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Malta\", \"Netherlands\", \"Norway\", \"Poland\", \r\n                \"Portugal\", \"Romania\", \"Slovakia\", \"Slovenia\", \"Spain\", \"Sweden\", \"Switzerland\"]\r\n\r\n    let eea_nationalities = [\"Austrian\", \"Belgian\", \"Bulgarian\", \"Croatian\", \"Cypriot\", \"Czech\", \"Danish\", \"Estonian\",\r\n                \"Finnish\", \"French\", \"German\", \"Greek\", \"Hungarian\", \"Icelandic\", \"Irish\", \"Italian\", \"Latvian\", \r\n                \"Liechtenstein\", \"Lithuanian\", \"Luxembourger\", \"Maltese\", \"Dutch\", \"Norwegian\", \"Polish\", \r\n                \"Portugese\", \"Romanian\", \"Slovak\", \"Slovenian\", \"Spanish\", \"Swedish\", \"Swiss\"]\r\n    \r\n    function isEAA(string){\r\n        return string.toLowerCase() == nationality.toLowerCase()\r\n    }      \r\n    \r\n    let responseObject = {\r\n        \"actions\": [\r\n            {\r\n                \"remember\": {\r\n                    \"nationality\": nationality\r\n                }\r\n            },\r\n    \t\t{\r\n    \t\t\t\"say\": \"Ok. Great.\"\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"say\": \"Why do you want to come to the UK?\"\r\n    \t\t},\r\n    \t\t{\r\n    \t\t\t\"listen\": {\r\n    \t\t\t    tasks: [\r\n    \t\t\t        \"respond_to_purpose_for_entry\"\r\n    \t\t        ]\r\n    \t\t\t}\r\n    \t\t},\r\n        ]\r\n    };\r\n    \r\n    if(eea_countries.find(isEAA) || eea_nationalities.find(isEAA)){\r\n        responseObject = {\r\n            \"actions\": [\r\n        \t\t{\r\n        \t\t\t\"say\": \"Looks like you do not need a visa to come to the UK. ðŸ˜Š\"\r\n        \t\t},\r\n        \t\t{\r\n        \t\t\t\"redirect\": \"task://goodbye\"\r\n        \t\t}\r\n            ]\r\n        };\r\n    }\r\n    \r\n    return res.json(responseObject)\r\n})\r\n\r\napp.post('/purpose-response', (req, res) => {\r\n\r\n    console.log(req.body)\r\n\r\n    let purpose = req.body.Field_purpose_Value\r\n\r\n    let responseObject = {}\r\n\r\n    if(purpose == \"Study\"){\r\n\r\n        responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"say\": \"Great.\"\r\n                },\r\n                {\r\n                    \"say\": \"How many months are you planning to study in the UK for?\"\r\n                },\r\n                {\r\n                    \"listen\": {\r\n                        tasks: [\r\n                            \"respond_to_study_duration\"\r\n                        ]\r\n                    }\r\n                },\r\n            ]\r\n        };\r\n    } else {\r\n        responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"say\": \"I'm sorry I will not be able to help you.\"\r\n                },\r\n                {\r\n                    \"say\": \"Currently, I'm trained to give immigration advice concerning study only. I hope to get more training with time.\"\r\n                },\r\n                {\r\n                    \"redirect\": \"task://goodbye\"\r\n                },\r\n            ]\r\n        };\r\n    }\r\n    \r\n    return res.json(responseObject)\r\n})\r\n\r\napp.post('/study-duration-response', (req, res) => {\r\n\r\n    let nationality = JSON.parse(req.body.Memory).nationality //Get user's nationality from memory\r\n    let months = req.body.Field_months_Value //Get study duration (number of months) from user's answer\r\n\r\n    console.log(nationality)\r\n    \r\n    let six_months_visa_free_countries = [\"Andorra\", \"Antigua and Barbuda\", \"Argentina\", \"Australia\",\r\n        \"Bahamas\", \"Barbados\", \"Belize\", \"Botswana\", \"Brazil\", \"Brunei\", \"Canada\", \"Chile\", \"Costa Rica\", \r\n        \"Dominica\", \"East Timor\", \"El Salvador\", \"Grenada\", \"Guatemala\", \"Honduras\", \"Hong Kong\", \"Israel\", \r\n        \"Japan\", \"Kiribati\", \"Macau\", \"Malaysia\", \"Maldives\", \"Marshall Islands\", \"Mauritius\", \"Mexico\", \r\n        \"Micronesia\", \"Monaco\", \"Namibia\", \"Nauru\", \"New Zealand\", \"Nicaragua\", \"Palau\", \"Panama\", \r\n        \"Papua New Guinea\", \"Paraguay\", \"Saint Kitts and Nevis\", \"Saint Lucia\", \r\n        \"Saint Vincent and the Grenadines\", \"Samoa\", \"San Marino\", \"Seychelles\", \"Singapore\", \"Solomon Islands\", \r\n        \"South Korea\", \"Taiwan\", \"Tonga\", \"Trinidad and Tobago\", \"Tuvalu\", \"United States of America\", \r\n        \"Uruguay\", \"Vanuatu\", \"Vatican City\"]\r\n\r\n    function isSixMonthsVisaFreeCountry(string){ //Check if nationality is part of six month visa free countries\r\n        return string.toLowerCase() == nationality.toLowerCase()\r\n    }\r\n\r\n    let responseObject = {}\r\n\r\n    if(six_months_visa_free_countries.find(isSixMonthsVisaFreeCountry) && months <= 6){\r\n        responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"say\": \"Looks like you do not need a visa to come to the UK. ðŸ˜Š\"\r\n                },\r\n                {\r\n                    \"redirect\": \"task://goodbye\"\r\n                }\r\n            ]\r\n        };\r\n    } else if(!(six_months_visa_free_countries.find(isSixMonthsVisaFreeCountry)) && months <= 6){\r\n        responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"say\": \"You will need to apply for a Short-term study visa if you are studying for 6 months or less.\"\r\n                },\r\n                {\r\n                    \"redirect\": \"task://goodbye\"\r\n                }\r\n            ]\r\n        };\r\n    } else if(months > 6) {\r\n        responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"say\": \"Alright, great.\"\r\n                },\r\n                {\r\n                    \"say\": \"How old are you?\"\r\n                },\r\n                {\r\n                    \"listen\": {\r\n                        tasks: [\r\n                            \"respond_to_age\"\r\n                        ]\r\n                    }\r\n                },\r\n            ]\r\n        };\r\n    }\r\n\r\n    return res.json(responseObject)\r\n})\r\n\r\napp.post('/age-response', (req, res) => {\r\n\r\n    console.log(req.body)\r\n\r\n    let age = req.body.Field_age_Value\r\n\r\n    console.log(age)\r\n\r\n    let responseObject = {}\r\n\r\n    if(age >= 16) {\r\n        responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"say\": \"You will need to apply for the Tier 4 (General) Student visa.\"\r\n                },\r\n                {\r\n                    \"remember\": {\r\n                        \"section\": \"Tier 4 (General) Student\" //to be used to query the database\r\n                    }\r\n                },\r\n                {\r\n                    \"say\": \"Do you want to know the requirements and conditions for a successful Tier 4 (General) Student visa application?\"\r\n                },\r\n                {\r\n                    \"listen\": {\r\n                        tasks: [\r\n                            \"tier-4-requirements-and-conditions\",\r\n                        ]\r\n                    }\r\n                },\r\n            ]\r\n        }\r\n    } else {\r\n        responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"say\": \"You will need to apply for the Tier 4 (Child) Student visa.\"\r\n                },\r\n                {\r\n                    \"redirect\": \"task://goodbye\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    \r\n    return res.json(responseObject)\r\n})\r\n\r\napp.post('/tier-4-requirements-and-conditions', (req, res) => {\r\n\r\n    let response = req.body.Field_response_Value\r\n\r\n    let actions = []\r\n\r\n    let responseObject = {}\r\n\r\n    if(response == \"Yes\"){\r\n        \r\n        readRulesBySection('Tier 4 (General) Student')\r\n        .then(results => {\r\n                let records = results.records.map(record => record._fields[0])\r\n                let rules = records.map(record => record.properties.desc)\r\n    \r\n                rules.forEach(rule => {\r\n                    let say = {\r\n                        \"say\": rule\r\n                    }\r\n    \r\n                    actions.push(say)\r\n                })\r\n\r\n                responseObject = {\r\n                    \"actions\": actions\r\n                }\r\n\r\n                return res.json(responseObject)\r\n            })\r\n            .finally(() => session.close());\r\n\r\n    } else {\r\n        responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"redirect\": \"task://goodbye\"\r\n                }\r\n            ]\r\n        }\r\n\r\n        return res.json(responseObject)\r\n    }\r\n})\r\n\r\napp.listen(process.env.PORT, () => console.log(`Example app listening at http://localhost:${process.env.PORT}`))"],"file":"server.js"}
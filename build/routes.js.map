{"version":3,"sources":["../src/routes.js"],"names":["routes","router","post","req","res","console","log","body","firstName","Field_firstName_Value","responseObject","json","nationality","Field_nationality_Value","Field_language_Value","CurrentInput","eea_countries","eea_nationalities","isEAA","string","toLowerCase","tasks","find","purpose","Field_purpose_Value","JSON","parse","Memory","months","Field_months_Value","six_months_visa_free_countries","isSixMonthsVisaFreeCountry","age","Field_age_Value","paragraphIndex","actions","say","push","then","results","records","map","record","_fields","rules","properties","desc","forEach","rule","listen","response","Field_response_Value","visa_type","paragraph","params","nextRoute","limit","type","subRuleRecords","subRules","subRule"],"mappings":"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","sourcesContent":["import {readRequirementsByType, readRulesByParagraph} from \"./queries\"\r\n\r\nconst routes = (router) => {\r\n    router.post('/name-response', (req, res) => {\r\n    \r\n        console.log(req.body)\r\n    \r\n        let firstName = req.body.Field_firstName_Value\r\n        \r\n        const responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"remember\": {\r\n                        \"name\": firstName\r\n                    }\r\n                },\r\n                {\r\n                    \"say\": firstName + \" 😊. That's a lovely name.\"\r\n                },\r\n                {\r\n                    \"say\": \"What is your country of citizenship or what country are you from?\"\r\n                },\r\n                {\r\n                    \"listen\": {\r\n                        \"tasks\": [\r\n                            \"respond_to_nationality\"\r\n                        ]\r\n                    }\r\n                },\r\n            ]\r\n        };\r\n        \r\n        return res.json(responseObject)\r\n    })\r\n    \r\n    router.post('/nationality-response', (req, res) => {\r\n    \r\n        let nationality = req.body.Field_nationality_Value\r\n    \r\n        if(!(nationality)){ //user entered string which is not a country\r\n            nationality = req.body.Field_language_Value\r\n    \r\n            if(!(nationality)) //user entered string which is not a language\r\n                nationality = req.body.CurrentInput\r\n        }\r\n    \r\n        console.log(req.body)\r\n        \r\n        let eea_countries = [\"Austria\", \"Belgium\", \"Bulgaria\", \"Croatia\", \"Cyprus\", \"Republic of Cyprus\", \"Czech Republic\", \r\n                    \"Denmark\", \"Estonia\", \"Finland\", \"France\", \"Germany\", \"Greece\", \"Hungary\", \"Iceland\", \"Ireland\", \"Italy\", \"Latvia\", \r\n                    \"Liechtenstein\", \"Lithuania\", \"Luxembourg\", \"Malta\", \"Netherlands\", \"Norway\", \"Poland\", \r\n                    \"Portugal\", \"Romania\", \"Slovakia\", \"Slovenia\", \"Spain\", \"Sweden\", \"Switzerland\"]\r\n    \r\n        let eea_nationalities = [\"Austrian\", \"Belgian\", \"Bulgarian\", \"Croatian\", \"Cypriot\", \"Czech\", \"Danish\", \"Estonian\",\r\n                    \"Finnish\", \"French\", \"German\", \"Greek\", \"Hungarian\", \"Icelandic\", \"Irish\", \"Italian\", \"Latvian\", \r\n                    \"Liechtenstein\", \"Lithuanian\", \"Luxembourger\", \"Maltese\", \"Dutch\", \"Norwegian\", \"Polish\", \r\n                    \"Portugese\", \"Romanian\", \"Slovak\", \"Slovenian\", \"Spanish\", \"Swedish\", \"Swiss\"]\r\n        \r\n        function isEAA(string){\r\n            return string.toLowerCase() == nationality.toLowerCase()\r\n        }      \r\n        \r\n        let responseObject = {\r\n            \"actions\": [\r\n                {\r\n                    \"remember\": {\r\n                        \"nationality\": nationality\r\n                    }\r\n                },\r\n                {\r\n                    \"say\": \"Ok. Great.\"\r\n                },\r\n                {\r\n                    \"say\": \"Why do you want to come to the UK?\"\r\n                },\r\n                {\r\n                    \"listen\": {\r\n                        tasks: [\r\n                            \"respond_to_purpose_for_entry\"\r\n                        ]\r\n                    }\r\n                },\r\n            ]\r\n        };\r\n        \r\n        if(eea_countries.find(isEAA) || eea_nationalities.find(isEAA)){\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"say\": \"Looks like you do not need a visa to come to the UK. 😊\"\r\n                    },\r\n                    {\r\n                        \"redirect\": \"task://goodbye\"\r\n                    }\r\n                ]\r\n            };\r\n        }\r\n        \r\n        return res.json(responseObject)\r\n    })\r\n    \r\n    router.post('/purpose-response', (req, res) => {\r\n    \r\n        console.log(req.body)\r\n    \r\n        let purpose = req.body.Field_purpose_Value\r\n    \r\n        let responseObject = {}\r\n    \r\n        if(purpose == \"Study\"){\r\n    \r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"say\": \"Great.\"\r\n                    },\r\n                    {\r\n                        \"say\": \"How many months are you planning to study in the UK for?\"\r\n                    },\r\n                    {\r\n                        \"listen\": {\r\n                            tasks: [\r\n                                \"respond_to_study_duration\"\r\n                            ]\r\n                        }\r\n                    },\r\n                ]\r\n            };\r\n        } else {\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"say\": \"I'm sorry I will not be able to help you.\"\r\n                    },\r\n                    {\r\n                        \"say\": \"Currently, I'm trained to give immigration advice concerning study only. I hope to get more training with time.\"\r\n                    },\r\n                    {\r\n                        \"redirect\": \"task://goodbye\"\r\n                    },\r\n                ]\r\n            };\r\n        }\r\n        \r\n        return res.json(responseObject)\r\n    })\r\n    \r\n    router.post('/study-duration-response', (req, res) => {\r\n    \r\n        let nationality = JSON.parse(req.body.Memory).nationality //Get user's nationality from memory\r\n        let months = req.body.Field_months_Value //Get study duration (number of months) from user's answer\r\n    \r\n        console.log(nationality)\r\n        \r\n        let six_months_visa_free_countries = [\"Andorra\", \"Antigua and Barbuda\", \"Argentina\", \"Australia\",\r\n            \"Bahamas\", \"Barbados\", \"Belize\", \"Botswana\", \"Brazil\", \"Brunei\", \"Canada\", \"Chile\", \"Costa Rica\", \r\n            \"Dominica\", \"East Timor\", \"El Salvador\", \"Grenada\", \"Guatemala\", \"Honduras\", \"Hong Kong\", \"Israel\", \r\n            \"Japan\", \"Kiribati\", \"Macau\", \"Malaysia\", \"Maldives\", \"Marshall Islands\", \"Mauritius\", \"Mexico\", \r\n            \"Micronesia\", \"Monaco\", \"Namibia\", \"Nauru\", \"New Zealand\", \"Nicaragua\", \"Palau\", \"Panama\", \r\n            \"Papua New Guinea\", \"Paraguay\", \"Saint Kitts and Nevis\", \"Saint Lucia\", \r\n            \"Saint Vincent and the Grenadines\", \"Samoa\", \"San Marino\", \"Seychelles\", \"Singapore\", \"Solomon Islands\", \r\n            \"South Korea\", \"Taiwan\", \"Tonga\", \"Trinidad and Tobago\", \"Tuvalu\", \"United States of America\", \r\n            \"Uruguay\", \"Vanuatu\", \"Vatican City\"]\r\n    \r\n        function isSixMonthsVisaFreeCountry(string){ //Check if nationality is part of six month visa free countries\r\n            return string.toLowerCase() == nationality.toLowerCase()\r\n        }\r\n    \r\n        let responseObject = {}\r\n    \r\n        if(six_months_visa_free_countries.find(isSixMonthsVisaFreeCountry) && months <= 6){\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"say\": \"Looks like you do not need a visa to come to the UK. 😊\"\r\n                    },\r\n                    {\r\n                        \"redirect\": \"task://goodbye\"\r\n                    }\r\n                ]\r\n            };\r\n        } else if(!(six_months_visa_free_countries.find(isSixMonthsVisaFreeCountry)) && months <= 6){\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"say\": \"You will need to apply for a Short-term study visa if you are studying for 6 months or less.\"\r\n                    },\r\n                    {\r\n                        \"redirect\": \"task://goodbye\"\r\n                    }\r\n                ]\r\n            };\r\n        } else if(months > 6) {\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"say\": \"Alright, great.\"\r\n                    },\r\n                    {\r\n                        \"say\": \"How old are you?\"\r\n                    },\r\n                    {\r\n                        \"listen\": {\r\n                            tasks: [\r\n                                \"respond_to_age\"\r\n                            ]\r\n                        }\r\n                    },\r\n                ]\r\n            };\r\n        }\r\n    \r\n        return res.json(responseObject)\r\n    })\r\n    \r\n    router.post('/age-response', (req, res) => {\r\n    \r\n        let age = req.body.Field_age_Value\r\n        let paragraphIndex = '245ZT'\r\n    \r\n        let responseObject = {}\r\n        let actions = []\r\n    \r\n        if(age >= 16) {\r\n    \r\n            let say = {\r\n                \"say\": \"You will need to apply for the Tier 4 (General) Student visa.\"\r\n            }\r\n    \r\n            actions.push(say)\r\n    \r\n            readRulesByParagraph(paragraphIndex)\r\n            .then(results => {\r\n                let records = results.records.map(record => record._fields[0])\r\n                let rules = records.map(record => record.properties.desc)\r\n    \r\n                rules.forEach(rule => {\r\n                    say = {\r\n                        \"say\": rule\r\n                    }\r\n    \r\n                    actions.push(say)\r\n                })\r\n    \r\n                say = {\r\n                    \"say\": \"Are you currently in the UK?\"\r\n                }\r\n                \r\n                actions.push(say)\r\n    \r\n                let listen = {\r\n                    \"listen\": {\r\n                        tasks: [\r\n                            \"respond_to_current_location\",\r\n                        ]\r\n                    }\r\n                }\r\n    \r\n                actions.push(listen)\r\n    \r\n                responseObject = {\r\n                    \"actions\": actions\r\n                }\r\n    \r\n                return res.json(responseObject)\r\n            })\r\n        } else {\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"say\": \"You will need to apply for the Tier 4 (Child) Student visa.\"\r\n                    },\r\n                    {\r\n                        \"redirect\": \"task://goodbye\"\r\n                    }\r\n                ]\r\n            }\r\n    \r\n            return res.json(responseObject)\r\n        }\r\n    })\r\n    \r\n    router.post('/current-location-response', (req, res) => {\r\n    \r\n        console.log(req.body)\r\n    \r\n        let response = req.body.Field_response_Value\r\n    \r\n        console.log(response)\r\n    \r\n        let responseObject = {}\r\n    \r\n        if(response == \"Yes\") {\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"remember\": {\r\n                            \"visa_type\": \"Leave to remain\" //to be used to query the database\r\n                        }\r\n                    },\r\n                    {\r\n                        \"say\": \"Do you want to know the requirements under the Point Based System for a successful Tier 4 (General) Student visa application to remain in the UK??\"\r\n                    },\r\n                    {\r\n                        \"listen\": {\r\n                            tasks: [\r\n                                \"tier-4-requirements-and-conditions\",\r\n                            ]\r\n                        }\r\n                    },\r\n                ]\r\n            }\r\n        } else {\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"remember\": {\r\n                            \"visa_type\": \"Entry clearance\" //to be used to query the database\r\n                        }\r\n                    },\r\n                    {\r\n                        \"say\": \"Do you want to know the requirements under the Point Based System for a successful Tier 4 (General) Student visa application to enter the UK?\"\r\n                    },\r\n                    {\r\n                        \"listen\": {\r\n                            tasks: [\r\n                                \"tier-4-requirements-and-conditions\",\r\n                            ]\r\n                        }\r\n                    },\r\n                ]\r\n            }\r\n        }\r\n        \r\n        return res.json(responseObject)\r\n    })\r\n    \r\n    router.post('/tier-4-requirements-and-conditions', (req, res) => {\r\n    \r\n        let response = req.body.Field_response_Value\r\n        let visa_type = JSON.parse(req.body.Memory).visa_type\r\n        let responseObject = {}\r\n    \r\n        if(response == \"Yes\"){\r\n            if(visa_type == 'Entry clearance'){\r\n                responseObject = {\r\n                    \"actions\": [\r\n                        {\r\n                            \"redirect\": \"task://entry-clearance-requirements-intro\"\r\n                        }\r\n                    ]\r\n                }\r\n            } else if(visa_type == 'Leave to remain'){\r\n                responseObject = {\r\n                    \"actions\": [\r\n                        {\r\n                            \"redirect\": \"task://leave-to-remain-requirements-intro\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n            \r\n    \r\n            return res.json(responseObject)\r\n    \r\n        } else {\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"redirect\": \"task://goodbye\"\r\n                    }\r\n                ]\r\n            }\r\n    \r\n            return res.json(responseObject)\r\n        }\r\n    })\r\n    \r\n    router.post('/tier-4/paragraphs/:paragraph', (req, res) => {\r\n    \r\n        let paragraph = req.params.paragraph\r\n        let paragraphIndex = \"\"\r\n        let nextRoute = \"\"\r\n        let limit = 100\r\n    \r\n        //entry clearance path\r\n        // if (paragraph == 'entry-clearance'){\r\n        //     paragraphIndex = '245ZU'\r\n        //     nextRoute = 'entry-clearance-requirements-intro'\r\n        // } \r\n        if (paragraph == 'entry-clearance-requirements-intro'){\r\n            paragraphIndex = '245ZV'\r\n            limit = 1\r\n            nextRoute = 'entry-clearance-grant-period-and-conditions'\r\n        } else if (paragraph == 'entry-clearance-grant-period-and-conditions'){\r\n            paragraphIndex = '245ZW'\r\n            nextRoute = 'goodbye'\r\n        } \r\n        //Leave to remain path\r\n        else if (paragraph == 'leave-to-remain-requirements-intro'){\r\n            paragraphIndex = '245ZX'\r\n            limit = 1\r\n            nextRoute = 'leave-to-remain-grant-period-and-conditions'\r\n        } else if (paragraph == 'leave-to-remain-requirements'){\r\n            paragraphIndex = '245ZY'\r\n            nextRoute = 'goodbye'\r\n        }\r\n    \r\n        console.log(paragraphIndex)\r\n    \r\n        let actions = []\r\n    \r\n        let responseObject = {}\r\n            \r\n        readRulesByParagraph(paragraphIndex, limit)\r\n        .then(results => {\r\n                let records = results.records.map(record => record._fields[0])\r\n                let rules = records.map(record => record.properties.desc)\r\n    \r\n                rules.forEach(rule => {\r\n                    let say = {\r\n                        \"say\": rule\r\n                    }\r\n    \r\n                    actions.push(say)\r\n                })\r\n    \r\n                let say = {\r\n                    \"say\": 'Do you wish to know the requirements?'\r\n                }\r\n    \r\n                actions.push(say)\r\n    \r\n                let listen = {}\r\n    \r\n                if(paragraph == 'entry-clearance-requirements-intro'){\r\n                    listen = {\r\n                        \"listen\": {\r\n                            tasks: [\r\n                                \"entry-clearance-requirements\",\r\n                            ]\r\n                        }\r\n                    }\r\n                } else if(paragraph == 'leave-to-remain-requirements-intro'){\r\n                    listen = {\r\n                        \"listen\": {\r\n                            tasks: [\r\n                                \"leave-to-remain-requirements\",\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n    \r\n                actions.push(listen)\r\n    \r\n                // let redirect = {\r\n                //     \"redirect\": \"task://\" + nextRoute\r\n                // }\r\n    \r\n                // actions.push(redirect)\r\n    \r\n                responseObject = {\r\n                    \"actions\": actions\r\n                }\r\n    \r\n                console.log(responseObject)\r\n    \r\n                return res.json(responseObject)\r\n            })\r\n            // .finally(() => session.close());\r\n    })\r\n    \r\n    router.post('/tier-4/requirements/:type', (req, res) => {\r\n    \r\n        let type = req.params.type\r\n        let response = req.body.Field_response_Value\r\n        let paragraphIndex = \"\"\r\n        let responseObject = {}\r\n        let actions = []\r\n    \r\n        if(type==\"entry-clearance\"){\r\n            paragraphIndex=\"245ZV\"\r\n        } else if(type=\"leave-to-remain\"){\r\n            paragraphIndex=\"245ZX\"\r\n        }\r\n    \r\n        if(response == \"Yes\"){\r\n            readRequirementsByType(paragraphIndex)\r\n            .then(results => {\r\n                let subRuleRecords = results.records.map(record => record._fields[1])\r\n                let rule = results.records[0]._fields[0].properties.desc\r\n                let subRules = subRuleRecords.map(record => record.properties.desc)\r\n    \r\n                let say = {\r\n                    \"say\": rule\r\n                }\r\n    \r\n                actions.push(say)\r\n    \r\n                subRules.forEach(subRule => {\r\n                    say = {\r\n                        \"say\": subRule\r\n                    }\r\n    \r\n                    actions.push(say)\r\n                })\r\n    \r\n                responseObject = {\r\n                    \"actions\": actions\r\n                }\r\n    \r\n                return res.json(responseObject)\r\n            })\r\n    \r\n        } else {\r\n            responseObject = {\r\n                \"actions\": [\r\n                    {\r\n                        \"redirect\": \"task://goodbye\"\r\n                    }\r\n                ]\r\n            }\r\n    \r\n            return res.json(responseObject)\r\n        }\r\n    })\r\n    \r\n}\r\n\r\nexport default routes"],"file":"routes.js"}